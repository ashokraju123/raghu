task untiTestCaseWithCodeCoverage << {
    String contents = ""
    FileTree tree = fileTree(dir: 'Test', 
    includes: ['**/bin/Debug/**/[Project]*UnitTest.dll'], exclude:['**/bin/Debug/**/*[Project].dll'])
    int i = 0
    def reportDir = "${buildDir}\\report\\nunit"
    def executedDll = []
    file(reportDir).mkdirs()
    tree.each { path ->
        if(!executedDll.contains(path.name)){
            def stdout = new ByteArrayOutputStream()
            def s = "External\\Tools\\NUnit\\nunit-console.exe 
            \"$path\" /noshadow /xml:\"$reportDir\\${path.name}.xml\" /framework:net-4.0"
            println s
            contents = contents + s + "\r\n"
            println "Output:\n$stdout"
        }
        else{
            println "Excluded already executed dll $path.name"
        }
    }   

    new File( 'C:/Program Files (x86)/Jenkins/workspace/
    [Project]/unitTestCase.bat' ).write( contents, 'UTF-8' )
    exec {
                commandLine 'cmd', '/c', 
                "C:\\JenkinAddOnFramework\\OpenCover\\OpenCover.Console.exe 
                -register:user -target:unitTestCase.bat -filter:+[Project*]* 
                -output:codeCoverageResult.xml"
        }
    exec {
            commandLine 'cmd', '/c', 
            "C:\\JenkinAddOnFramework\\ReportGenerator\\ReportGenerator.exe 
            -reports:codeCoverageResult.xml -targetdir:coverage"
    }
}

Hide   Copy Code

task runNUnitIntTest << {
    FileTree tree = fileTree(dir: 'Test', 
    includes: ['**/bin/Debug/**/[ProjectName]*IntTest.dll', 
    '[Project]/bin/Debug/[Project].dll'], exclude:['**/bin/Debug/**/*Web.SecurityUnitTest.dll'])
    int i = 0
    def reportDir = "${buildDir}\\report\\nunit"
    def executedDll = []
    file(reportDir).mkdirs()
    tree.each { path ->
        if(!executedDll.contains(path.name)){
            def stdout = new ByteArrayOutputStream()
            def s = "External\\Tools\\NUnit\\nunit-console.exe 
            \"$path\" /noshadow /xml:\"$reportDir\\${path.name}.xml\" /framework:net-4.0"
            println s
            exec {
                commandLine 'cmd', '/c', s
                standardOutput = stdout
            }
            executedDll.add(path.name)
            println "Output:\n$stdout"
        }
        else{
            println "Excluded already executed dll $path.name"
        }
    }
}
